#!/usr/bin/env bash

# Το παρόν πρόγραμμα αποτελεί front-end του javascript minifier της Google που
# φέρει τη γενική ονομασία "Google Closure Compiler". Πρόκειται για ένα θαυμαστό
# πρόγραμμα το οποίο διαβάζει javascript προγράμματα και παράγει, επίσης, κώδικα
# javascript ο οποίος επιτελεί τις ίδιες ακριβώς διεργασίες με τον πηγαίο κώδικα
# αλλά έχει πολύ μικρότερο μέγεθος. Παράλληλα, ο compiler ελέγχει αρκετά σημεία
# στον κώδικα και επισημαίνει κάποιες αστοχίες, ενώ ο παραγόμενος κώδικας έχει
# και ένα επιπλέον πλεονέκτημα: δεν είναι εύκολα διαβαστός από ανθρώπους, πράγμα
# που σημαίνει ότι παρέχεται ένας βαθμός προστασίας του κώδικα.
#
# Εγκατάσταση του compiler
# ------------------------
#
# Για να λειτουργήσει το παρόν πρόγραμμα θα πρέπει να «κατεβάσουμε» τον compiler
# από τα αποθετήρια της Google:
#
#	https://dl.google.com/closure-compiler/compiler-latest.zip
#
# Αποσυμπιέζουμε το zip file και μεταφέρουμε τον compiler στο local directory
# κάτω από το installation directory της «Πανδώρας» με σκοπό να εγκατασταθεί
# τελικά στο lib directory κάτω από το base directory της «Πανδώρας» το οποίο
# by default είναι το directory "/var/opt/pandora".
#
# Ο compiler είναι το .jar αρχείο που θα βρείτε στο directory αποσυμπίεσης του
# zip file. Θα πρέπει να μετονομάσουμε αυτό το αρχείο σε "jsmin.jar" προκειμένου
# να λειτουργήσει το παρόν πρόγραμμα.
#
# Περιγράφουμε συνοπτικά τα βήματα που πρέπει να ακολουθήσουμε:
#
#	mkdir jsmin
#	cd jsmin
#	wget https://dl.google.com/closure-compiler/compiler-latest.zip
#	unzip compiler-latest.zip
#	mv closure-compiler-v20190819.jar jsmin.jar
#
# Σε αυτό το σημείο θα πρέπει να αποφασίσουμε αν θα εγκαταστήσουμε τον compiler
# στο directory βάσης της «Πανδώρας» ή στο installation directory. Αν έχουμε το
# installation directory στη μηχανή μας, προτιμούμε να εγκαταστήσουμε εκεί τον
# compiler και κατόπιν να κάνουμε re-installation της «Πανδώρας»:
#
#	mv jsmin.jar ~/repos/pandora/local
#	cd ..
#	rm -rf jsmin
#	cd ~/repos/pandora
#	install/install
#
# Αν δεν διατηρούμε το installation directory της «Πανδώρας» στη μηχανή μας,
# αλλά έχουμε εγκατεστημένη την «Πανδώρα», τότε μεταφέρουμε τον compiler
# απευθείας στο directory lib του directory βάσης της «Πανδώρας»:
#
#	mv jsmin.jar "${PANDORA_BASEDIR}/lib/"
#	cd ..
#	rm -rf jsmin
#
# Χρήση του compiler
# ------------------
#
# Η συνήθης χρήση του compiler είναι απλή. Μταβαίνουμε στο development directory
# της εφαρμογής μας και δίνουμε την εντολή:
#
#	pd_jsmin $(find . -name '*.js' -print)
#
# Αυτό έχει ως αποτέλεσμα τη δημιουργία compiled προγραμμάτων javascript που
# φέρουν ονόματα με κατάληξη ".min.js", π.χ. για το πηγαίο πρόγραμμα
# "www/checkin/selida.js" θα δημιουργηθεί το αντίστοιχο compiled πρόγραμμα
# "www/checkin/selida.min.js".
#
# Στο σημείο αυτό πρέπει να τονίσουμε τα εξής τρία βασικά πράγματα:
#
#	Ο compiler αγνοεί αρχεία με κατάληξη ".min.js" προκειμένου να μην γίνει
#	εκ νέου compilation του ήδη compiled προγράμματος.
#
#	Αν το ".min.js" file είναι νεότερο από το αντίστοιχο ".js" file, τότε
#	θεωρούμε ότι το αρχείο έχει ήδη μετατραπεί και ο compiler αγνοεί το εν
#	λόγω αρχείο. Ωστόσο μπορούμε να εξαναγκάσουμε τον compiler να μεταφράσει
#	εκ νέου το αρχείο με την option "-f" ή "--force".
#
#	Αν το επίπεδο συμπίεσης είναι "ADVANCED_OPTIMIZATIONS" (default), τότε
#	θα πρέπει να μεριμνήσουμε για τα global αντικείμενα της εφαρμογής και να
#	τα καταγράψουμε σε αρχείο το οποίο θα γνωστοποιήσουμε στον compiler με
#	την option "-e" ή "--externs".
#
# Αφού δοκιμάσουμε την εφαρμογή μας από το development directory χρησιμοποιώντας
# τον πηγαίο κώδικα και ακολούθως τα αντίστοιχα μεταφρασμένα πρόγράμματα,
# μεταφέρουμε στο production directory μόνο τα μεταφρασμένα αρχεία, προκειμένου
# να μην κοινοποιηείται ο πηγαίος κώδικας στο δίκτυο.

[ -z "${PANDORA_BASEDIR}" ] &&
PANDORA_BASEDIR="/var/opt/pandora"

! . "${PANDORA_BASEDIR}/lib/pandora.sh" &&
exit 2

pd_usagemsg="[ -e externs ] files..."

pd_seterrcode \
	"usage" \
	"jarerr" \
	"jserr" \
	""

compiler="${PANDORA_BASEDIR}/lib/jsmin.jar"
[ ! -r "${compiler}" ] &&
pd_errmsg "${compiler}: cannot read file" &&
pd_exit "jarerr"

eval set -- "$(pd_parseopts \
"ae:swpfq" \
"advanced,extrens:,simple,white-spaces,pretty,force,quiet" "$@")"
[ $1 -ne 0 ] && pd_usage
shift

opts=
level="ADVANCED_OPTIMIZATIONS"
externs=
force=
error=
quiet=

for arg in "$@"
do
	case "${arg}" in
	-a|--advanced)
		level="ADVANCED_OPTIMIZATIONS"
		;;
	-e|--externs)
		if [ -r "$2" ]; then
			opts+="--externs $2 "
			externs="yes"
		else
			pd_errmsg "$2: cannot read externs file"
			error="yes"
		fi

		shift 2
		;;
	-s|--simple)
		level="SIMPLE_OPTIMIZATIONS"
		shift
		;;
	-w|--white-space)
		level="WHITESPACE_ONLY"
		shift
		;;
	-p|--pretty)
		opts+="--formatting=PRETTY_PRINT "
		shift
		;;
	-f|--force)
		force="yes"
		shift
		;;
	-q|--quiet)
		quiet="yes"
		shift
		;;
	--)
		shift
		break
		;;
	esac
done
unset arg

[ -n "${error}" ] &&
pd_usage

say() {
	[ -z "${quiet}" ] &&
	pd_errmsg "$@"

	return 0
}

[ "${level}" == "ADVANCED_OPTIMIZATIONS" ] &&
[ -z "${externs}" ] &&
pd_errmsg "WARNING: externs file(s) not specified"

opts+="--compilation_level=${level} "
opts+="--language_in=ECMASCRIPT5 "
opts+="--warning_level=QUIET "
opts+="--charset=UTF-8 "

for i in "$@"
do
	[[ "${i}" =~ \.min\.js$ ]] &&
	continue

	name="${i%.*}"

	[ "${i}" != "${name}.js" ] &&
	pd_errmsg "${i}: invalid source file name" &&
	error="yes" &&
	continue

	ofile="${name}.min.js"

	[ -z "${force}" ] &&
	[ "${ofile}" -nt "${i}" ] &&
	say "${i}: already compiled" &&
	continue

	pd_ttymsg -n "${i}:"
	java -jar "${compiler}" ${opts} --js "${i}" --js_output_file "${ofile}"
	pd_ttymsg
done

[ -n "${error}" ] &&
pd_exit "jserr"

exit 0
