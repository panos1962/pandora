#!/usr/bin/env bash

###############################################################################@
##
## @BEGIN
##
## @COPYRIGHT BEGIN
## Copyright (C) 2020 Panos I. Papadopoulos <panos1962_AT_gmail_DOT_com>
## @COPYRIGHT END
##
## @FILETYPE BEGIN
## bash
## @FILETYPE END
##
## @FILE BEGIN
## bin/pd_sendmail —— sendmail wrapper
## @FILE END
##
## @DESCRIPTION BEGIN
## Το πρόγραμμα "pd_sendmail" αποτελεί έναν sendmail wrapper, δηλαδή ένα
## front-end interface προς το πρόγραμμα "sendmail". Ως γνωστόν το "sendmail"
## είναι σχετικά χαμηλού επιπέδου δρομολογητής μηνυμάτων, πράγμα που σημαίνει
## ότι παρουσιάζει κάποιες ελλείψεις σε ευκολίες αποστολής μηνυμάτων, π.χ. δεν
## παρέχει τη δυνατότητα αποστολής συνημμένων αρχείων κλπ. Το "pd_sendmail"
## καλύπτει κάποιες από αυτές τις ελλείψεις του "sendmail" προετοιμάζοντας
## ένα RFC822 μήνυμα το οποίο κατόπιν προωθεί στο "sendmail" πτοκειμένου το
## μήνυμα να δρομολογηθεί στους παραλήπτες.
## @DESCRIPTION END
##
## @HISTORY BEGIN
## Updated: 2020-04-05
## Created: 2020-03-02
## @HISTORY END
##
## @END
##
###############################################################################@

[ -z "${PANDORA_BASEDIR}" ] &&
PANDORA_BASEDIR="/var/opt/pandora"

pd_tmpmax=3

! . "${PANDORA_BASEDIR}/lib/pandora.sh" &&
exit 1

pd_usagemsg="$(pd_tput reset dim)[$(pd_tput reset bold fblue)OPTIONS\
$(pd_tput reset dim)] [$(pd_tput reset bold fblue)ARGS$(pd_tput reset dim)]

$(pd_tput dim)Options
-------$(pd_tput)
$(pd_tput bold fyellow)-f$(pd_tput) from
$(pd_tput bold fyellow)-t$(pd_tput) to...
$(pd_tput bold fyellow)-c$(pd_tput) Cc...
$(pd_tput bold fyellow)-b$(pd_tput) Bcc...
$(pd_tput bold fyellow)-s$(pd_tput) subject
$(pd_tput bold fyellow)-m$(pd_tput) message
$(pd_tput bold fyellow)-p$(pd_tput)
$(pd_tput bold fyellow)-a$(pd_tput) file...


$(pd_tput dim)Arguments
---------$(pd_tput)
message file[s]
"

pd_seterrcode \
	"nosender" \
	"norecipient" \
	"messagerror" \
	"attacherror" \
	"mailerror" \
	""

tmp1="${pd_tmpname[1]}"
tmp2="${pd_tmpname[2]}"
tmp3="${pd_tmpname[3]}"

pd_sigtrap

eval set -- "$(pd_parseopts \
"f:t:r:c:b:s:m:pa:" \
"from:,sender:,to:,recipient:,cc:,carbon:,bcc:,blind:,\
subject:,message:,text,attach:" "$@")"
[ $1 -ne 0 ] && pd_usage
shift

sender=
recipient=
carbon=
blind=
subject=
message=
message_set=
tipos="text/html"
attach=

error=

for arg in "$@"
do

	case "${arg}" in
	-f|--from|--sender)
		sender="$2"
		shift 2
		;;

	-t|-r|--to|--recipient)
		recipient="$(pd_push "${recipient}" "$2" ",")"
		shift 2
		;;

	-c|--cc|--copy)
		carbon="$(pd_push "${carbon}" "$2" ",")"
		shift 2
		;;

	-b|--bcc|--blind)
		blind="$(pd_push "${blind}" "$2" ",")"
		shift 2
		;;

	-s|--subject)
		subject="$2"
		shift 2
		;;

	-m|--message)
		message="$2"
		message_set="yes"
		shift 2
		;;

	-p|--text)
		tipos="text/plain"
		shift 1
		;;

	-a|--attach)
		attach="$(pd_push "${attach}" "$2")"
		shift 2
		;;

	--)
		shift
		;;
	esac
done
unset arg

[ -n "${error}" ] &&
pd_usage

[ -z "${sender}" ] &&
pd_errmsg "no sender address" &&
pd_exit "nosender"

[ -z "${recipient}" ] &&
pd_errmsg "no recipient address" &&
pd_exit "norecipient"

# Στο σημείο αυτό εκκινεί η σύνθεση του μηνύματος. Γενικώς θα χρειαστούμε ένα
# (τυχαίο) boundary string το οποίο ορίζουμε ευθύς αμέσως.

boundary="7d594ba65fa297f034307627da50903c9306eeb3"

# Σε πρώτη φάση δημιουργούμε εκείνο το μέρος του μηνύματος το οποίο αφορά στα
# συνημμένα αρχεία.

for i in ${attach}
do
	[ ! -f "${i}" ] &&
	pd_errmsg "${i}: file not found" &&
	error="yes" &&
	continue

	[ ! -s "${i}" ] &&
	pd_errmsg "${i}: file is empty (ignored)" &&
	continue

	[ ! -r "${i}" ] &&
	pd_errmsg "${i}: cannot read file" &&
	error="yes" &&
	continue

	case "${i^^}" in
	*.ODT)
		t="application/vnd.oasis.opendocument.text"
		;;

	*.ODS)
		t="application/vnd.oasis.opendocument.spreadsheet"
		;;

	*.XLS)
		t="application/vnd.ms-excel"
		;;

	*.XLSX)
		t="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet "
		;;

	*.TXT)
		t="text/plain"
		;;

	*.PDF)
		t="application/pdf"
		;;

	*.JPG|JPEG)
		t="application/jpeg"
		;;

	*.GIF)
		t="application/gif"
		;;

	*.PNG)
		t="application/png"
		;;

	*.SVG)
		t="application/svg+xml"
		;;

	*.ZIP)
		t="application/zip"
		;;

	*.7Z)
		t="application/x-7z-compressed"
		;;

	*)
		pd_errmsg "${i}: unsupported file type" &&
		error="yes" &&
		continue
		;;
	esac

	! base64 "${i}" >"${tmp1}" &&
	pd_errmsg "${i}: base64 encode failed" &&
	error="yes" &&
	continue

	[ -n "${error}" ] &&
	continue

	echo "--${boundary}
Content-Type: ${t}; charset=UTF-8
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename=${i}
"
	cat "${tmp1}"
done >"${tmp3}"

unset i
unset t

[ -n "${error}" ] &&
pd_exit "attacherror"

# Έχουμε τελειώσει με τα συνημμένα αρχεία και ήρθε η ώρα να ασχοληθούμε με
# το κυρίως σώμα του μηνύματος.

if [ -z "${message_set}" ]; then
	cat $* ||
	error="yes"
elif [ -n "${message}" ]; then
	echo "${message}"
fi >"${tmp1}"

[ -n "${error}" ] &&
pd_exit "messagerror"

# Έχουμε τελειώσει με τα συνημμένα αρχεία και με το κύριο σώμα του
# μηνύματος και είναι πλέον η ώρα να αποστείλουμε το μήνυμα.

{
	echo "From: ${sender}
To: ${recipient}"

	[ -n "${carbon}" ] &&
	echo "Cc: ${carbon}"

	[ -n "${blind}" ] &&
	echo "Bcc: ${blind}"

	[ -n "${subject}" ] &&
	echo "Subject: ${subject}"

	echo "MIME-Version: 1.0
Content-Type: multipart/mixed; boundary=${boundary}
"

	[ -s "${tmp1}" ] &&
	echo "--${boundary}
Content-Type: ${tipos}; charset=UTF-8
Content-Disposition: inline
" &&
	cat "${tmp1}"

	cat "${tmp3}"
	echo "--${boundary}--"
} |
sendmail -t &&
pd_exit 0

pd_errmsg "sendmail failure" &&
pd_exit "mailerror"
