#!/usr/bin/env bash

###############################################################################@
##
## @BEGIN
##
## @COPYRIGHT BEGIN
## Copyright (C) 2020 Panos I. Papadopoulos <panos1962_AT_gmail_DOT_com>
## @COPYRIGHT END
##
## @FILETYPE BEGIN
## bash
## @FILETYPE END
##
## @FILE BEGIN
## bin/pd_sendmail —— sendmail wrapper
## @FILE END
##
## @DESCRIPTION BEGIN
## Το πρόγραμμα "pd_sendmail" αποτελεί έναν sendmail wrapper, δηλαδή ένα
## front-end interface προς το πρόγραμμα "sendmail". Ως γνωστόν το "sendmail"
## είναι σχετικά χαμηλού επιπέδου δρομολογητής μηνυμάτων, πράγμα που σημαίνει
## ότι παρουσιάζει κάποιες ελλείψεις σε ευκολίες αποστολής μηνυμάτων, π.χ. δεν
## παρέχει τη δυνατότητα αποστολής συνημμένων αρχείων κλπ. Το "pd_sendmail"
## καλύπτει κάποιες από αυτές τις ελλείψεις του "sendmail" προετοιμάζοντας
## ένα RFC822 μήνυμα το οποίο κατόπιν προωθεί στο "sendmail" προκειμένου το
## μήνυμα να δρομολογηθεί στους παραλήπτες.
## @DESCRIPTION END
##
## @HISTORY BEGIN
## Updated: 2020-04-05
## Created: 2020-03-02
## @HISTORY END
##
## @END
##
###############################################################################@

[ -z "${PANDORA_BASEDIR}" ] &&
PANDORA_BASEDIR="/var/opt/pandora"

pd_tmpmax=2

! . "${PANDORA_BASEDIR}/lib/pandora.sh" &&
exit 1

unset pd_errlevel
pd_usagemsg="$(pd_tput reset dim)[$(pd_tput reset bold fblue)OPTIONS\
$(pd_tput reset dim)] [$(pd_tput reset bold fblue)ARGS$(pd_tput reset dim)]

$(pd_tput dim)Options
‾‾‾‾‾‾‾$(pd_tput)
$(pd_tput bold fyellow)-f$(pd_tput) address $(pd_tput dim)(sender address)$(pd_tput)
$(pd_tput bold fyellow)-t$(pd_tput) to $(pd_tput dim)(recipient address)...$(pd_tput)
$(pd_tput bold fyellow)-c$(pd_tput) Cc $(pd_tput dim)(carbon copy)...$(pd_tput)
$(pd_tput bold fyellow)-b$(pd_tput) Bcc $(pd_tput dim)(blind carbon copy)...$(pd_tput)
$(pd_tput bold fyellow)-s$(pd_tput) subject$(pd_tput)
$(pd_tput bold fyellow)-m$(pd_tput) message$(pd_tput)
$(pd_tput bold fyellow)-n$(pd_tput) $(pd_tput dim)(null message body)$(pd_tput)
$(pd_tput bold fyellow)-p$(pd_tput) $(pd_tput dim)(plain text)$(pd_tput)
$(pd_tput bold fyellow)-a$(pd_tput) file $(pd_tput dim)(attached file)...$(pd_tput)


$(pd_tput dim)Arguments
‾‾‾‾‾‾‾‾‾$(pd_tput)
message file[s]
"
pd_seterrcode \
	"dataerror" \
	"nosender" \
	"norecipient" \
	"messagerror" \
	"attacherror" \
	"mailerror" \
	""

tmp1="${pd_tmpname[1]}"
tmp2="${pd_tmpname[2]}"

pd_sigtrap

eval set -- "$(pd_parseopts \
"f:t:r:c:b:s:m:npa:" \
"from:,sender:,to:,recipient:,cc:,carbon:,bcc:,blind:,\
subject:,message:,null,text,attach:" "$@")"
[ $1 -ne 0 ] && pd_usage
shift

check_email() {
	pd_isemail "$1" &&
	return 0

	pd_errmsg "${1}: invalid email address"
	return 1
}

sender=
recipient=
carbon=
blind=
subject=
message=
message_set=
tipos="text/html"
attach=

error=

for arg in "$@"
do

	case "${arg}" in
	-f|--from|--sender)
		check_email "$2" &&
		sender="$2" ||
		error="yes"
		shift 2
		;;

	-t|-r|--to|--recipient)
		check_email "$2" &&
		recipient="$(pd_push "${recipient}" "$2" ",")" ||
		error="yes"
		shift 2
		;;

	-c|--cc|--copy)
		check_email "$2" &&
		carbon="$(pd_push "${carbon}" "$2" ",")" ||
		error="yes"
		shift 2
		;;

	-b|--bcc|--blind)
		check_email "$2" &&
		blind="$(pd_push "${blind}" "$2" ",")" ||
		error="yes"
		shift 2
		;;

	-s|--subject)
		subject="$2"
		shift 2
		;;

	-m|--message)
		message="$2"
		message_set="yes"
		shift 2
		;;

	-n|--null)
		message=
		message_set="yes"
		shift 1
		;;

	-p|--text)
		tipos="text/plain"
		shift 1
		;;

	-a|--attach)
		attach="$(pd_push "${attach}" "$2")"
		shift 2
		;;

	--)
		shift 1
		;;

	esac
done
unset arg

[ -n "${error}" ] &&
pd_exit "dataerror"

[ -z "${sender}" ] &&
pd_errmsg "no sender address" &&
pd_exit "nosender"

[ -z "${recipient}" ] &&
pd_errmsg "no recipient address" &&
pd_exit "norecipient"

# Στο σημείο αυτό εκκινεί η σύνθεση του μηνύματος. Γενικώς θα χρειαστούμε ένα
# (τυχαίο) boundary string το οποίο ορίζουμε ευθύς αμέσως.

boundary="7d594ba65fa297f034307627da50903c9306eeb3"

# Σε πρώτη φάση δημιουργούμε εκείνο το μέρος του μηνύματος το οποίο αφορά στα
# συνημμένα αρχεία.

attached_files() {
	local f=
	local typ=
	local err=0

	for f in ${attach}
	do
		[ ! -f "${f}" ] &&
		pd_errmsg "${f}: file not found" &&
		err=1 &&
		continue

		[ ! -s "${f}" ] &&
		pd_errmsg "${f}: file is empty (ignored)" &&
		continue

		[ ! -r "${f}" ] &&
		pd_errmsg "${f}: cannot read file" &&
		err=1 &&
		continue

		case "${f^^}" in
		*.ODT)
			typ="application/vnd.oasis.opendocument.text"
			;;

		*.ODS)
			typ="application/vnd.oasis.opendocument.spreadsheet"
			;;

		*.XLS)
			typ="application/vnd.ms-excel"
			;;

		*.XLSX)
			typ="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet "
			;;

		*.TXT)
			typ="text/plain"
			;;

		*.PDF)
			typ="application/pdf"
			;;

		*.JPG|JPEG)
			typ="application/jpeg"
			;;

		*.GIF)
			typ="application/gif"
			;;

		*.PNG)
			typ="application/png"
			;;

		*.SVG)
			typ="application/svg+xml"
			;;

		*.ZIP)
			typ="application/zip"
			;;

		*.7Z)
			typ="application/x-7z-compressed"
			;;

		*)
			pd_errmsg "${f}: unsupported file type" &&
			err=1 &&
			continue
			;;
		esac

		echo "--${boundary}
Content-Type: ${typ}; charset=UTF-8
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename=${f}
"

		base64 "${f}" &&
		continue

		pd_errmsg "${f}: base64 encode failed"
		err=1
	done

	return ${err}
}

attached_files >"${tmp1}" ||
pd_exit "attacherror"

# Έχουμε τελειώσει με τα συνημμένα αρχεία και ήρθε η ώρα να ασχοληθούμε με
# το κυρίως σώμα του μηνύματος.

if [ -z "${message_set}" ]; then
	cat $* ||
	error="yes"
elif [ -n "${message}" ]; then
	echo "${message}"
fi >"${tmp2}"

[ -n "${error}" ] &&
pd_exit "messagerror"

# Έχουμε τελειώσει με τα συνημμένα αρχεία και με το κυρίως σώμα του
# μηνύματος και είναι πλέον η ώρα να αποστείλουμε το μήνυμα.

{
	echo "From: ${sender}
To: ${recipient}"

	[ -n "${carbon}" ] &&
	echo "Cc: ${carbon}"

	[ -n "${blind}" ] &&
	echo "Bcc: ${blind}"

	[ -n "${subject}" ] &&
	echo "Subject: ${subject}"

	echo "MIME-Version: 1.0
Content-Type: multipart/mixed; boundary=${boundary}
"

	[ -s "${tmp2}" ] &&
	echo "--${boundary}
Content-Type: ${tipos}; charset=UTF-8
Content-Disposition: inline
" &&
	cat "${tmp2}"
	cat "${tmp1}"
	echo "--${boundary}--"
} | sendmail -t &&
pd_exit 0

pd_errmsg "sendmail failure" &&
pd_exit "mailerror"
